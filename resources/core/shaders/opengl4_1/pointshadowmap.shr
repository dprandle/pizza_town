type:<nsstring>nsshader</nsstring>
stage.size:<uint32>3</uint32>
stage[0].name:<nsstring>vertex</nsstring>
stage[0].source:<nsstring>#version 410

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 tex;
layout (location = 2) in vec3 norm;
layout (location = 3) in vec3 tang;
layout (location = 4) in ivec4 boneIDs;
layout (location = 5) in vec4 boneWeights;
layout (location = 6) in vec4 trans1;
layout (location = 7) in vec4 trans2;
layout (location = 8) in vec4 trans3;
layout (location = 9) in vec4 trans4;
layout (location = 10) in uint referenceID;

uniform sampler2D heightMap;
uniform vec2 hminmax;
uniform bool hasHeightMap;
uniform mat4 nodeTransform;
uniform mat4 boneTransforms[100];
uniform int hasBones;

mat4 transform;
vec4 worldPos;

void main()
{
	transform[0] = vec4(trans1.x, trans2.x, trans3.x, trans4.x);
	transform[1] = vec4(trans1.y, trans2.y, trans3.y, trans4.y);
	transform[2] = vec4(trans1.z, trans2.z, trans3.z, trans4.z);
	transform[3] = vec4(trans1.w, trans2.w, trans3.w, trans4.w);

	if (hasBones == 1)
	{
		mat4 boneTrans = boneTransforms[boneIDs.x] * boneWeights.x;
		boneTrans += boneTransforms[boneIDs.y] * boneWeights.y;
		boneTrans += boneTransforms[boneIDs.z] * boneWeights.z;
		boneTrans += boneTransforms[boneIDs.w] * boneWeights.w;
		worldPos = transform * boneTrans * vec4(position, 1.0);
	}
	else
		worldPos = transform * nodeTransform * vec4(position, 1.0);

	if (hasHeightMap)
	{
		float heightMult = textureLod(heightMap, tex, 0.0).r; // store height info in blue channel
		worldPos.z += heightMult*(hminmax.y - hminmax.x) + hminmax.x;
	}

	gl_Position = worldPos;
}

</nsstring>
stage[1].name:<nsstring>geometry</nsstring>
stage[1].source:<nsstring>
#version 410
layout (triangles) in;
layout (triangle_strip, max_vertices = 18) out;

out vec4 worldPos;
uniform mat4 projMat;
uniform vec3 lightPos;
				   
mat4 views[6] = mat4[6](
	mat4(
		vec4(0,0,1,0),
		vec4(0,-1,0,0),
		vec4(-1,0,0,0),
		vec4(0,0,0,1)
		),
	mat4(
		vec4(0,0,-1,0),
		vec4(0,-1,0,0),
		vec4(1,0,0,0),
		vec4(0,0,0,1)
		),
	mat4(
		vec4(1,0,0,0),
		vec4(0,0,1,0),
		vec4(0,1,0,0),
		vec4(0,0,0,1)
		),
	mat4(
		vec4(1,0,0,0),
		vec4(0,0,-1,0),
		vec4(0,-1,0,0),
		vec4(0,0,0,1)
		),
	mat4(
		vec4(1,0,0,0),
		vec4(0,-1,0,0),
		vec4(0,0,1,0),
		vec4(0,0,0,1)
		),
	mat4(
		vec4(-1,0,0,0),
		vec4(0,-1,0,0),
		vec4(0,0,-1,0),
		vec4(0,0,0,1)
		)
	);
mat4 inv_trans = mat4(1.0);
void main()
{
	inv_trans[3] = vec4(-lightPos, 1.0);
	for (gl_Layer = 0; gl_Layer < 6; ++gl_Layer)
	{
		views[gl_Layer] = views[gl_Layer] * inv_trans;
		for (int vertIndex = 0; vertIndex < 3; ++vertIndex)
		{
			worldPos = gl_in[vertIndex].gl_Position;
			gl_Position = projMat * views[gl_Layer] * worldPos;
			EmitVertex();
		}
		EndPrimitive();
	}
}

</nsstring>
stage[2].name:<nsstring>fragment</nsstring>
stage[2].source:<nsstring>#version 410


uniform float maxDepth;
uniform vec3 lightPos;
in vec4 worldPos;

void main()
{
	gl_FragDepth = length(worldPos.xyz - lightPos) / maxDepth;
}

</nsstring>
