type:<nsstring>nsshader</nsstring>
stage.size:<uint32>2</uint32>
stage[0].name:<nsstring>vertex</nsstring>
stage[0].source:<nsstring>
#version 410
layout (location = 0) in vec3 position;
uniform mat4 transform;
uniform mat4 projCamMat;
uniform mat4 nodeTransform;

void main()
{
	gl_Position = projCamMat * transform * nodeTransform * vec4(position, 1.0);
}

</nsstring>
stage[1].name:<nsstring>fragment</nsstring>
stage[1].source:<nsstring>
#version 410

#define MAX_MATERIALS 64

layout (location = 0) out vec4 final_frag_color;

struct PointLight 
{
	float ambientIntensity;
	float diffuseIntensity;
	vec3 color;
	vec3 position;
	float shadowDarkness;
	float attConstant;
	float attLinear;
	float attExp;
};

struct Material
{
	float spec_power;
	float spec_intensity;
	vec3 spec_color;
};

uniform PointLight light;
uniform samplerCubeShadow shadowMap;
uniform sampler2D gDiffuseMap;
uniform usampler2D gMatMap;
uniform sampler2D gWorldPosMap;
uniform sampler2D gNormalMap;

uniform vec4 viewport;
uniform vec2 gbuf_tex_size;
uniform vec3 camWorldPos;
uniform vec2 shadowTexSize;
uniform int shadowSamples;
uniform float epsilon;
uniform float maxDepth;
uniform bool castShadows;
uniform uvec2 fog_factor;
uniform vec4 fog_color;
uniform vec4 bgColor;
uniform Material materials[MAX_MATERIALS];

const int PosX = 0;
const int NegX = 1;
const int PosY = 2;
const int NegY = 3;
const int PosZ = 4;
const int NegZ = 5;

int get_face(vec3 dir)
{
	if (abs(dir.x) > abs(dir.y) && abs(dir.x) > abs(dir.z))
	{
		if (dir.x > 0)
			return PosX;
		else
			return NegX;
	}
	else if (abs(dir.y) > abs(dir.x) && abs(dir.y) > abs(dir.z))
	{
		if (dir.y > 0)
			return PosY;
		else
			return NegY;
	}
	else
	{
		if (dir.z > 0)
			return PosZ;
		else
			return NegZ;
	}
}

float shadow_factor(vec3 light_to_pixel, float dist)
{
	float depth = dist / maxDepth;

	if (shadowSamples == 0)
		return texture(shadowMap, vec4(light_to_pixel,depth-0.0001));

	float total = 0.0;
	float xDelta = 1.0 / shadowTexSize.x;
	float yDelta = 1.0 / shadowTexSize.y;

	int face = get_face(light_to_pixel);

	int negBoundary = shadowSamples * -1;

	for (int i = negBoundary; i <= shadowSamples; ++i)
	{
		for (int j = negBoundary; j <= shadowSamples; ++j)
		{
			vec4 texCoord = vec4(light_to_pixel,depth-0.0001);
			switch (face)
			{
				case (PosX):
					texCoord.y += xDelta*i;
					texCoord.z += yDelta*j;
					break;
				case (NegX):
					texCoord.y += xDelta*i;
					texCoord.z += yDelta*j;
					break;
				case (PosY):
					texCoord.x += xDelta*i;
					texCoord.z += yDelta*j;
					break;
				case (NegY):
					texCoord.x += xDelta*i;
					texCoord.z += yDelta*j;
					break;
				case (PosZ):
					texCoord.x += xDelta*i;
					texCoord.y += yDelta*j;
					break;
				case (NegZ):
					texCoord.x += xDelta*i;
					texCoord.y += yDelta*j;
					break;
			}
			
			total += texture(shadowMap, texCoord);
		}
	}
    return total / ( (2*shadowSamples + 1) * (2*shadowSamples+1) );
}

vec2 uv_from_screen_size()
{
	return gl_FragCoord.xy / gbuf_tex_size;
}

vec4 light_influence(vec3 worldPos, vec3 norm, Material mat)
{
	vec3 light_to_pixel = worldPos - light.position;
	float dist = length(light_to_pixel);
	light_to_pixel = normalize(light_to_pixel);

	vec4 ambientColor = vec4(light.color, 1.0f) * light.ambientIntensity;
	float diffuseFactor = dot(norm, -light_to_pixel);

	vec4 diffuseColor  = vec4(0, 0, 0, 0);
	vec4 specularColor = vec4(0, 0, 0, 0);

	float shadowFactor = 1.0;
	if (castShadows)
		shadowFactor = shadow_factor(light_to_pixel, dist);

	if (diffuseFactor > 0) 
	{
		diffuseColor = vec4(light.color, 1.0f) * light.diffuseIntensity * diffuseFactor;
        vec3 vertexToEye = normalize(camWorldPos - worldPos);
        vec3 lightReflect = normalize(reflect(light_to_pixel, norm));
        float specularFactor = dot(vertexToEye, lightReflect);
		specularFactor = pow(specularFactor, mat.spec_power);
		if (specularFactor > 0)
		{
			specularColor = vec4(mat.spec_color, 1.0f) * mat.spec_intensity * specularFactor;
		}
	}

	vec4 color = ambientColor + (diffuseColor + specularColor)*shadowFactor;

	// Spot light attenuation formula
	float attenuation =  1.0f / (light.attConstant + light.attLinear * dist + light.attExp * dist * dist);

	return color * attenuation;
}

float linear_fog_factor(vec3 worldPos)
{
	float factor;
	vec3 dVec = (camWorldPos.xyz - worldPos.xyz);
	factor = (fog_factor.y - length(dVec) ) / (fog_factor.y - fog_factor.x);
	factor = clamp( factor, 0.0, 1.0 );
	return factor;
}

vec4 lit_color_from_attachments(vec2 uv_from_screen_size)
{
	Material mat;
	float fog_factor;
	vec4 light_factor;
	uint id = texture(gMatMap, uv_from_screen_size).w; 
	vec4 base_color = texture(gDiffuseMap, uv_from_screen_size);
	vec4 wpos = texture(gWorldPosMap, uv_from_screen_size);
	vec4 normal = texture(gNormalMap, uv_from_screen_size);


	if (id > MAX_MATERIALS)
	{
		if (id != 255)
			base_color = vec4(bgColor.xyz, base_color.a);
	}
	else
	{
		fog_factor = linear_fog_factor(wpos.xyz);
		mat = materials[id]; // id should be good - well see if we can use this
		if (mat.spec_color == vec3(0.0,0.0,0.0))
			mat.spec_color = light.color;
		light_factor = light_influence(wpos.xyz, normal.xyz, mat);
		base_color = mix(base_color * light_factor, fog_color, 1 - fog_factor);
	}
	return base_color;
}

void main()
{
	vec2 texCoord = uv_from_screen_size();
	final_frag_color = lit_color_from_attachments(texCoord);
}

</nsstring>
