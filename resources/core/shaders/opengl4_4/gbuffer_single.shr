type:<nsstring>nsshader</nsstring>
stage.size:<uint32>2</uint32>
stage[0].name:<nsstring>vertex</nsstring>
stage[0].source:<nsstring>
#version 440

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 tex;
layout (location = 2) in vec3 norm;
layout (location = 3) in vec3 tang;
layout (location = 4) in ivec4 boneIDs;
layout (location = 5) in vec4 boneWeights;

uniform sampler2D heightMap;
uniform mat4 nodeTransform;
uniform mat4 projCamMat;
uniform mat4 boneTransforms[100];
uniform bool hasBones;
uniform bool hasHeightMap;
uniform vec2 hminmax;
uniform mat4 transform;

vec4 localPos;

out vec2 texCoords;
out vec3 normal;
out vec3 tangent;
out vec4 worldPos;

void main()
{
	if (hasBones)
	{
		mat4 boneTrans = boneTransforms[boneIDs.x] * boneWeights.x;
		boneTrans += boneTransforms[boneIDs.y] * boneWeights.y;
		boneTrans += boneTransforms[boneIDs.z] * boneWeights.z;
		boneTrans += boneTransforms[boneIDs.w] * boneWeights.w;
		localPos = boneTrans * vec4(position, 1.0);
		normal = (transform * boneTrans * vec4(norm, 0.0)).xyz;
		tangent = (transform * boneTrans * vec4(tang, 0.0)).xyz;
	}
	else
	{
		localPos = nodeTransform * vec4(position, 1.0);
		normal = (transform  * nodeTransform * vec4(norm, 0.0)).xyz;
		tangent = (transform  * nodeTransform * vec4(tang, 0.0)).xyz;
	}
	
	worldPos = transform * localPos;

	if (hasHeightMap)
	{
		float heightMult = textureLod(heightMap, tex, 0.0).r; // store height info in red channel
		worldPos.z += heightMult*(hminmax.y - hminmax.x) + hminmax.x;
	}
	texCoords = tex;
    	gl_Position = projCamMat * worldPos;
}

</nsstring>
stage[1].name:<nsstring>fragment</nsstring>
stage[1].source:<nsstring>
#version 440

in vec2 texCoords;
in vec3 normal;
in vec3 tangent;
in vec4 worldPos;

uniform sampler2D diffuseMap;
uniform sampler2D opacityMap;
uniform sampler2D normalMap;

uniform vec4 tex_coord_rect_d;
uniform vec4 tex_coord_rect_o;
uniform vec4 tex_coord_rect_n;

uniform vec4 color_add_d;
uniform vec4 color_mult_d;

uniform vec4 color_add_n;
uniform vec4 color_mult_n;

uniform vec4 color_add_o;
uniform vec4 color_mult_o;

uniform uint material_id;
uniform uint entityID;
uniform uint pluginID;

uniform bool colorMode;
uniform vec4 fragColOut;
uniform bool hasDiffuseMap;
uniform bool hasNormalMap;
uniform bool hasOpacityMap;
uniform bool hasHeightMap;
uniform bool force_alpha;

layout (location = 0) out vec3 colorOut;
layout (location = 1) out uvec4 pickingOut;
layout (location = 2) out vec4 worldPosOut;
layout (location = 3) out vec3 normalOut;

vec2 adj_tex_coords(vec4 rect)
{
	vec2 texc;
	texc.x = texCoords.x * (rect.z - rect.x) + rect.x;
	texc.y = texCoords.y * (rect.w - rect.y) + rect.y;
	return texc;
}

vec3 calculateNormalMap()
{
    vec3 norm = normalize(normal);
	if (!colorMode && hasNormalMap)
	{
		vec3 tang = normalize(tangent);
		tang = normalize(tang - dot(tang, norm) * norm);
		vec3 biTangent = cross(tang, norm);
		vec3 bmNormal = (texture(normalMap, adj_tex_coords(tex_coord_rect_n)) * color_mult_n + color_add_n).xyz;
		bmNormal = 2.0 * bmNormal - vec3(1.0, 1.0, 1.0);
		vec3 nNormal;
		mat3 transBumpMap = mat3(tang, biTangent, norm);
		nNormal = transBumpMap * bmNormal;
		nNormal = normalize(nNormal);
		return nNormal;
	}
	return norm;
}

void main()
{
	
	vec4 difCol = fragColOut;
	if (!colorMode && hasDiffuseMap)
	{
		if (hasHeightMap)
			difCol = texture(diffuseMap, vec2(worldPos.xy)/20);
		else
			difCol = texture(diffuseMap, adj_tex_coords(tex_coord_rect_d)) * color_mult_d + color_add_d;
	}

	float alpha = difCol.a;
	if (hasOpacityMap)
		alpha = (texture(opacityMap, adj_tex_coords(tex_coord_rect_o)) * color_mult_o + color_add_o).a;
	if (alpha < 0.1)
		discard;

	colorOut = difCol.rgb;
	pickingOut = uvec4(pluginID, entityID, 0, material_id);
	worldPosOut = vec4(worldPos.xyz, gl_FragCoord.z);
	normalOut = calculateNormalMap();
}

</nsstring>
