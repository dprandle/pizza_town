type:<nsstring>nsshader</nsstring>
stage.size:<uint32>3</uint32>
stage[0].name:<nsstring>vertex</nsstring>
stage[0].source:<nsstring>
#version 440

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 tex;
layout (location = 2) in vec3 norm;
layout (location = 3) in vec3 tang;
layout (location = 4) in ivec4 boneIDs;
layout (location = 5) in vec4 boneWeights;
layout (location = 6) in vec4 trans1;
layout (location = 7) in vec4 trans2;
layout (location = 8) in vec4 trans3;
layout (location = 9) in vec4 trans4;
layout (location = 10) in uint referenceID;

uniform sampler2D heightMap;
uniform sampler2D diffuseMap;
uniform mat4 nodeTransform;
uniform mat4 projCamMat;
uniform mat4 boneTransforms[100];
uniform bool hasBones;
uniform bool hasHeightMap;
uniform vec2 hminmax;

mat4 transform;
vec4 localPos;

out vec2 tex_coords;
out vec3 normal_v;
out vec3 tangent_v;
out vec4 worldPos_v;
flat out uint ent_id_v;

void main()
{
	transform[0] = vec4(trans1.x, trans2.x, trans3.x, trans4.x);
	transform[1] = vec4(trans1.y, trans2.y, trans3.y, trans4.y);
	transform[2] = vec4(trans1.z, trans2.z, trans3.z, trans4.z);
	transform[3] = vec4(trans1.w, trans2.w, trans3.w, trans4.w);

	if (hasBones)
	{
		mat4 boneTrans = boneTransforms[boneIDs.x] * boneWeights.x;
		boneTrans += boneTransforms[boneIDs.y] * boneWeights.y;
		boneTrans += boneTransforms[boneIDs.z] * boneWeights.z;
		boneTrans += boneTransforms[boneIDs.w] * boneWeights.w;
		localPos = boneTrans * vec4(position, 1.0);
		normal_v = (transform * boneTrans * vec4(norm, 0.0)).xyz;
		tangent_v = (transform * boneTrans * vec4(tang, 0.0)).xyz;
	}
	else
	{
		localPos = nodeTransform * vec4(position, 1.0);
		normal_v = (transform  * nodeTransform * vec4(norm, 0.0)).xyz;
		tangent_v = (transform  * nodeTransform * vec4(tang, 0.0)).xyz;
	}

	worldPos_v = transform * localPos;

	if (hasHeightMap)
	{
		float heightMult = textureLod(heightMap, tex, 0.0).r; // store height info in red channel
		worldPos_v.z += heightMult*(hminmax.y - hminmax.x) + hminmax.x;
	}
	tex_coords = tex;
	ent_id_v = referenceID;
    gl_Position = projCamMat * worldPos_v;
} 



</nsstring>
stage[1].name:<nsstring>geometry</nsstring>
stage[1].source:<nsstring>
#version 440

layout (triangles) in;
layout (line_strip, max_vertices = 6) out;

in vec2 tex_coords[3];
in vec3 normal_v[3];
in vec3 tangent_v[3];
in vec4 worldPos_v[3];
flat in uint ent_id_v[3];

out vec2 texCoords;
out vec3 normal;
out vec3 tangent;
out vec4 worldPos;
flat out uint ent_id;

void main()
{
	ent_id = ent_id_v[0];
	
	gl_Position = gl_in[0].gl_Position;
	texCoords = tex_coords[0];
	normal = normal_v[0];
	tangent = tangent_v[0];
	worldPos = worldPos_v[0];
	EmitVertex();
	
	gl_Position = gl_in[1].gl_Position;
	texCoords = tex_coords[1];
	normal = normal_v[1];
	tangent = tangent_v[1];
	worldPos = worldPos_v[1];
	EmitVertex();
	EndPrimitive();

	gl_Position = gl_in[1].gl_Position;
	texCoords = tex_coords[1];
	normal = normal_v[1];
	tangent = tangent_v[1];
	worldPos = worldPos_v[1];
	EmitVertex();
	
	gl_Position = gl_in[2].gl_Position;
	texCoords = tex_coords[2];
	normal = normal_v[2];
	tangent = tangent_v[2];
	worldPos = worldPos_v[2];	
	EmitVertex();
	EndPrimitive();

	gl_Position = gl_in[2].gl_Position;
	texCoords = tex_coords[2];
	normal = normal_v[2];
	tangent = tangent_v[2];
	worldPos = worldPos_v[2];   
	EmitVertex();
	
	gl_Position = gl_in[0].gl_Position;
	texCoords = tex_coords[0];
	normal = normal_v[0];
	tangent = tangent_v[0];
	worldPos = worldPos_v[0];	
	EmitVertex();
	EndPrimitive();
}



</nsstring>
stage[2].name:<nsstring>fragment</nsstring>
stage[2].source:<nsstring>
#version 440

in vec2 texCoords;
in vec3 normal;
in vec3 tangent;
in vec4 worldPos;
flat in uint ent_id;

uniform sampler2D diffuseMap;
uniform sampler2D opacityMap;
uniform sampler2D normalMap;

uniform uint material_id;
uniform uint pluginID;
uniform bool colorMode;
uniform vec4 fragColOut;
uniform bool hasDiffuseMap;
uniform bool hasNormalMap;
uniform bool hasOpacityMap;
uniform bool hasHeightMap;
uniform bool force_alpha;

layout (location = 0) out vec3 colorOut;
layout (location = 1) out uvec4 pickingOut;
layout (location = 2) out vec4 worldPosOut;
layout (location = 3) out vec3 normalOut;

vec3 calculateNormalMap()
{
    vec3 norm = normalize(normal);
	if (!colorMode && hasNormalMap)
	{
		vec3 tang = normalize(tangent);
		tang = normalize(tang - dot(tang, norm) * norm);
		vec3 biTangent = cross(tang, norm);
		vec3 bmNormal = texture(normalMap, texCoords).xyz;
		bmNormal = 2.0 * bmNormal - vec3(1.0, 1.0, 1.0);
		vec3 nNormal;
		mat3 transBumpMap = mat3(tang, biTangent, norm);
		nNormal = transBumpMap * bmNormal;
		nNormal = normalize(nNormal);
		return nNormal;
	}
	return norm;
}

void main()
{
	vec4 difCol = fragColOut;
	if (!colorMode && hasDiffuseMap)
	{
		if (hasHeightMap)
			difCol = texture(diffuseMap, vec2(worldPos.xy)/20);
		else
			difCol = texture(diffuseMap, texCoords);
	}

	if (hasOpacityMap)
		difCol.a = texture(opacityMap, texCoords).a;

	colorOut = difCol.rgb;
	worldPosOut = vec4(worldPos.xyz, gl_FragCoord.z);
	pickingOut = uvec4(pluginID, ent_id, 0, material_id);
	normalOut = calculateNormalMap();
}
</nsstring>
